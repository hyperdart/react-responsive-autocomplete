import e,{useState as t,useEffect as o}from"react";import{Autocomplete as r}from"@material-ui/lab";import{useMediaQuery as n,IconButton as a,TextField as l}from"@material-ui/core";import{withStyles as i,useTheme as p}from"@material-ui/core/styles";import{ArrowBack as s}from"@material-ui/icons";function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)({}).hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},d.apply(null,arguments)}var c=i((e=>({wrapper:{position:"relative"},focused:{position:"fixed",top:0,left:0,width:"100%",padding:"16px 12px 16px 0px",background:e.palette.background.paper,zIndex:1300,boxShadow:"0 2px 8px rgba(0,0,0,0.2)",height:"100vh",maxWidth:"-webkit-fill-available",display:"flex",justifyContent:"flex-start"},backButton:{alignSelf:"flex-start",marginBottom:"18px"},paper:{boxShadow:"none",width:"100vw !important",left:"0 !important",borderTop:"1.5px solid #eee",borderRadius:0,marginTop:e.spacing(1)},popper:{width:"101vw !important",left:"0 !important",right:"0 !important",overflow:"hidden"}})),{withTheme:!0})((i=>{var c,m;const[u,f]=t(!1),{classes:b,mobileBackgroundClassName:v,backButtonClassName:h,renderInput:w,onFocus:x,onClose:y,blurOnSelect:g,...k}=i,E=p(),$=n(E.breakpoints.down("xs")),O=u&&$;o((()=>{O?(document.body.style.overflow="hidden",document.documentElement.style.overflow="hidden",document.body.style.position="fixed",document.body.style.width="100%"):(document.body.style.overflow="",document.documentElement.style.overflow="",document.body.style.position="",document.body.style.width="")}),[u,$]);return e.createElement("div",{className:O?`${b.focused} ${v||""}`:b.wrapper},O&&e.createElement(a,{className:`${b.backButton} ${h||""}`},e.createElement(s,null)),e.createElement(r,d({},k,{onFocus:e=>{f(!0),x&&x(e)},onClose:(e,t)=>{"toggleInput"!=t&&f(!1),y&&y(e,t)},openOnFocus:!0,classes:{...k.classes||{},...O?{paper:`${(null===(c=k.classes)||void 0===c?void 0:c.paper)||""} ${b.paper}`.trim(),popper:`${(null===(m=k.classes)||void 0===m?void 0:m.popper)||""} ${b.popper}`.trim()}:{}},blurOnSelect:!!$||g,renderInput:$?t=>{const o=i.renderInput?w(t):e.createElement(l,d({},t,{label:"Search",variant:"outlined"}));return e.cloneElement(o,{...o.props,autoFocus:u})}:w})))}));export{c as ResponsiveAutocomplete,c as default};
